import React from 'react';
import {Component} from 'react';
import {connect} from "react-redux";
import {getPosts, getPostsByUserId, getPostById, newPost, updatePost, deletePost} from '../actions/actions';
import moment from 'moment';

class ActivityLogForm extends Component {
    state = {
        id: "",
        user_id: "",
        postTitle: "",
        postBody: "",
        engagementScore: "",
        energyScore: ""
    }

    componentDidMount(){
        console.log("GET USER POSTS TRIGGERED")
        this.props.getPostsByUserId(localStorage.getItem('user_id'))
    }

    getPostsByUserid = e => {
        e.preventDefault()
        this.props.getPostsByUserId(this.state.user_id)
        this.setState({
            user_id: ""
        })
    }

    getPostById = e => {
        e.preventDefault()
        this.props.getPostById(this.state.id)
        this.setState({
            id: ""
        })
    }

    changeHandler = e => {
        e.preventDefault();
        this.setState({
            [e.target.name]: e.target.value
        })
    }

    newPost = e => {
        e.preventDefault()
        let postObj = {
            //username: needs to be added, pending addition to server DB
            user_id: parseInt(this.props.user_id, 10),
            postTitle: this.state.postTitle,
            postBody: this.state.postBody,
            engagementScore: parseInt(this.state.engagementScore, 10),
            energyScore: parseInt(this.state.energyScore, 10),
            createdAt: moment().format('MMMM Do YYYY, h:mm:ss a')
        }
        console.log("POST TRIGGERED")
        this.props.newPost(postObj)
        console.log("GET USER POSTS TRIGGERED")
        this.props.getPostsByUserId(this.props.user_id)
        this.setState({
            id: "",
            user_id: "",
            postTitle: "",
            postBody: "",
            engagementScore: "",
            energyScore: ""
        })
    }

    updatePost = e => {
        console.log("UPDATE TRIGGERED")
        e.preventDefault()
        let updateId = parseInt(this.state.id, 10);
        let postObj = {
            user_id: parseInt(this.state.user_id, 10),
            postTitle: this.state.postTitle,
            postBody: this.state.postBody,
            engagementScore: parseInt(this.state.engagementScore, 10),
            energyScore: parseInt(this.state.energyScore, 10)
        }
        this.props.updatePost(updateId, postObj)
        this.setState({
            id: "",
            user_id: "",
            postTitle: "",
            postBody: "",
            engagementScore: "",
            energyScore: ""
        })
    }

    deletePost = e => {
        console.log("DELETE TRIGGERED")
        e.preventDefault()
        let deleteId = parseInt(this.state.id, 10);
        this.props.deletePost(deleteId)
        this.setState({
            id: "",
            user_id: "",
            postTitle: "",
            postBody: "",
            engagementScore: "",
            energyScore: ""
        })
    }

    timeStampCreator(){
        let date = new Date()
      
        let month = date.getMonth() + 1;
        let day = date.getDate();
        let year = date.getFullYear();
        let hour = (date.getHours() > 12)?(date.getHours() - 12):(date.getHour);
        let minutes = date.getMinutes();
        let ampm =  (date.getHours() > 12)?("pm"):("am")
      
        let timeStamp = `${month}/${day}/${year} at ${hour}:${minutes}${ampm}`
      
        return timeStamp
      }
      
      timeStampTest(){
        let timestamp = `${moment().format('MMMM Do YYYY, h:mm:ss a')}`
        console.log(timestamp)
    }


    render(){
        return(
            <div>
                {/* 
                //TESTING VVVVVV
                <h1>ALL POSTS ALREADY LOADED IN CONSOLE</h1>
                <h1>GET POSTS BY USER ID</h1>
                <input 
                    type = "number"
                    placeholder = "user_id"
                    name = "user_id"
                    value = {this.state.user_id}
                    onChange = {this.changeHandler}
                />
                <button onClick = {this.getPostsByUserid} >Search by id</button>

                <h1>Get Individual Post By Post ID</h1>
                <input
                    type = "number"
                    placeholder = "id"
                    name = "id"
                    value = {this.state.id}
                    onChange = {this.changeHandler}
                />
                <button onClick = {this.getPostById}>SUBMIT</button>

                <h1>New post</h1>
                <input
                    type = "number"
                    placeholder = "user_id"
                    name = "user_id"
                    value = {this.state.user_id}
                    onChange = {this.changeHandler}
                 />
                <input
                    type = "text"
                    placeholder = "postTitle"
                    name = "postTitle"
                    value = {this.state.postTitle}
                    onChange = {this.changeHandler}
                 />
                 <input
                    type = "text"
                    placeholder = "postBody"
                    name = "postBody"
                    value = {this.state.postBody}
                    onChange = {this.changeHandler}
                 />
                 <input
                    type = "number"
                    placeholder = "engagementScore"
                    name = "engagementScore"
                    value = {this.state.engagementScore}
                    onChange = {this.changeHandler}
                 />
                 <input
                    type = "number"
                    placeholder = "energyScore"
                    name = "energyScore"
                    value = {this.state.energyScore}
                    onChange = {this.changeHandler}
                 />
                 
                 <button onClick = {this.newPost}>POST!</button>
                 <button onClick = {this.updatePost}>UPDATE!</button>
                 <button onClick = {this.deletePost}>DELETE</button>
                 
                 <h2>Post ID for update and delete</h2>
                 <input
                    type = "number"
                    placeholder = "postID for update only"
                    name = "id"
                    value = {this.state.id}
                    onChange = {this.changeHandler}
                 />
                <button onClick = {this.timeStampTest}>TEST TIMESTAMP</button> */}
                <div className = "activityLogForm">
                    <div className = "inputContainer">
                        <div>
                            <input
                                type = "text"
                                placeholder = "postTitle"
                                name = "postTitle"
                                value = {this.state.postTitle}
                                onChange = {this.changeHandler}
                            />
                            <input
                                type = "number"
                                placeholder = "engagementScore"
                                name = "engagementScore"
                                value = {this.state.engagementScore}
                                onChange = {this.changeHandler}
                            />
                            <input
                                type = "number"
                                placeholder = "energyScore"
                                name = "energyScore"
                                value = {this.state.energyScore}
                                onChange = {this.changeHandler}
                            />
                        </div>
                        <div>
                            <input
                                type = "text"
                                placeholder = "postBody"
                                name = "postBody"
                                value = {this.state.postBody}
                                onChange = {this.changeHandler}
                            />
                        </div>
                    </div>
                    <div>
                         <button onClick = {this.newPost}>POST!</button>
                    </div>
                </div>
                

              

                
            </div>
        )
    }
}

function mapStateToProps(state){
    return {
        posts: state.posts,
        user_id: state.user_id,
        username: state.username,
    }
}     

export default connect(mapStateToProps, {getPosts, getPostsByUserId, newPost, getPostById, updatePost, deletePost})(ActivityLogForm);





From ActivityLogForm


    componentDidUpdate(){
        //reflectionLogPostIds arrays Assignment
        
        // this.props.getCycleDate(1)
        
        if (this.props.endOfWeekCycle === ""){
            console.log("UPDATE CYCLE DATE TRIGGER")
            this.props.updateEndOfWeekCycle(1)
        }

        //--------------------------------
        // if (this.props.weekNumber === 0 || this.isDateLaterThanCDate(this.props.endOfWeekCycle, moment().format('L'))){
        //     let newWeekNumber = this.props.weekNumber + 1
        //     this.props.updateWeekNumber()
        // }
        // if (this.props.weekNumber === 0){
        //     return null
        // }else{
        //     if (this.props.latestLog[this.props.latestLog.length -1] !== this.props.posts[this.props.posts.length -1].id){
        //         let idToBePosted = this.props.posts[this.props.posts.length -1].id
        //         let currentLogNumber = this.props.logs.length
        //         this.props.createLogEntry(idToBePosted, currentLogNumber)
        //     }
        // }
    }



    //getEndOfWeekCycle

export const getCycleDate = (id) => (dispatch) => {
  dispatch ({type: GETCYCLEDATE_START})
  axiosAuth()
  .get(`https://dyl-backend.herokuapp.com/api/cycle/${id}`)
  .then(res => {
      console.log("GETCYCLEDATE RES: ", res)
      dispatch({type: GETCYCLEDATE_SUCCESS})
  })
  .catch(err => {
      console.log("GETCYCLEDATE ERR: ", err)
      dispatch({type: GETCYCLEDATE_FAILURE})
  })
}


export const updateEndOfWeekCycle = (id) => dispatch => {
  console.log("NEW CYCLE: ", moment().add(7, 'days').calendar(), "TYPE OF: ", typeof moment().add(7, 'days').calendar())
  let newDate = moment().add(7, 'days').calendar()
  // let newDate = "test"
  console.log("NEWDATEVARIABLE: ", newDate)
  dispatch({ type: NEW_CYCLE_UPDATE_START });
  axiosAuth()
    .put(`https://dyl-backend.herokuapp.com/api/cycle/${id}`, newDate)
    .then(res => {
      console.log("NEW CYCLE UPDATE RES: ", res)
      dispatch({ type: NEW_CYCLE_UPDATE_SUCCESS});
    })
    .catch(err => {
      console.log("NEW CYCLE UPDATE ERR: ", err)
      dispatch({ type: NEW_CYCLE_UPDATE_FAILURE});
    });
};

//get weekNumber

export const getWeekNumber = () => (dispatch) => {
  dispatch ({type: GETWEEKNUMBER_START})
  axiosAuth()
  .get('https://dyl-backend.herokuapp.com/api/time/1')
  .then(res => {
      console.log("GETWEEKNUMBER RES: ", res)
      dispatch({type: GETWEEKNUMBER_SUCCESS})
  })
  .catch(err => {
      console.log("GETWEEKNUMBER ERR: ", err)
      dispatch({type: GETWEEKNUMBER_FAILURE})
  })
}


export const updateWeekNumber = (updatedWeekNumber) => dispatch => {
  console.log("NEW WEEKNUMBER: ", updatedWeekNumber, "typeOf: ", typeof updatedWeekNumber)
  dispatch({ type: WEEKNUMBERUPDATE_START });
  axiosAuth()
    .put(`https://dyl-backend.herokuapp.com/api/time/1`, 2)
    .then(res => {
      console.log("WEEK NUMBER UPDATE RES: ", res)
      dispatch({ type: WEEKNUMBERUPDATE_SUCCESS});
    })
    .catch(err => {
      console.log("WEEK NUMBER UPDATE ERR: ", err)
      dispatch({ type: WEEKNUMBERUPDATE_FAILURE});
    });
};




export const createLog = () => dispatch => {
  dispatch({ type: CREATELOG_START });
  let newLog = []
  axiosAuth()
    .post('URL_TO_LOGS_ARRAY', newLog)
    .then(res => {
      console.log("CREATELOG RES: ", res)
      dispatch({ type: CREATELOG_SUCCESS}); //<-----PAYLOAD IS ENTIRE LOGS ARRAY
    })
    .catch(err => {
      console.log("CREATELOG ERR: ", err)
      dispatch({ type: CREATELOG_FAILURE});
    });
};

export const createLogEntry = (idToBePosted, currentLogNumber) => dispatch => {
  dispatch({ type: CREATELOGENTRY_START });
  
  axiosAuth()
    .post(`URL_TO_LOG_WITH_${currentLogNumber}`, idToBePosted)
    .then(res => {
      console.log("CREATELOGENTRY RES: ", res)
      dispatch({ type: CREATELOGENTRY_SUCCESS}); //<-----PAYLOAD IS ENTIRE LOGS ARRAY
    })
    .catch(err => {
      console.log("CREATELOGENTRY ERR: ", err)
      dispatch({ type: CREATELOGENTRY_FAILURE});
    });
};


export const NEW_CYCLE_UPDATE_START = 'NEW_CYCLE_UPDATE_START';
export const NEW_CYCLE_UPDATE_SUCCESS = 'NEW_CYCLE_UPDATE_SUCCESS';
export const NEW_CYCLE_UPDATE_FAILURE = 'NEW_CYCLE_UPDATE_FAILURE';


export const CREATELOG_START = 'CREATELOG_START';
export const CREATELOG_SUCCESS = 'CREATELOG_SUCCESS';
export const CREATELOG_FAILURE = 'CREATELOG_FAILURE';

export const CREATELOGENTRY_START = 'CREATELOGENTRY_START';
export const CREATELOGENTRY_SUCCESS = 'CREATELOGENTRY_SUCCESS';
export const CREATELOGENTRY_FAILURE = 'CREATELOGENTRY_FAILURE';

export const GETCYCLEDATE_START = 'GETCYCLEDATE_START';
export const GETCYCLEDATE_SUCCESS = 'GETCYCLEDATE_SUCCESS';
export const GETCYCLEDATE_FAILURE = 'GETCYCLEDATE_FAILURE';



export const GETWEEKNUMBER_START = 'GETWEEKNUMBER_START';
export const GETWEEKNUMBER_SUCCESS = 'GETWEEKNUMBER_SUCCESS';
export const GETWEEKNUMBER_FAILURE = 'GETWEEKNUMBER_FAILURE';

export const WEEKNUMBERUPDATE_START = 'WEEKNUMBERUPDATE_START';
export const WEEKNUMBERUPDATE_SUCCESS = 'WEEKNUMBERUPDATE_SUCCESS';
export const WEEKNUMBERUPDATE_FAILURE = 'WEEKNUMBERUPDATE_FAILURE';

      
        case CREATELOG_START:
            return {
                ...state
            }           
        case CREATELOG_SUCCESS:
            return {
                ...state,
                logs: "" //<---------------------------action.payload
            }           
        case CREATELOG_FAILURE:
            return {
                ...state
            }

        //##################################
        
        case CREATELOGENTRY_START:
            return {
                ...state
            }           
        case CREATELOGENTRY_SUCCESS:
            return {
                ...state,
                logs: "" //<---------------------------action.payload
            }           
        case CREATELOGENTRY_FAILURE:
            return {
                ...state
            }
        //#######################################

        case GETCYCLEDATE_START:
            return {
                ...state
            }           
        case GETCYCLEDATE_SUCCESS:
            return {
                ...state,
                // endOfWeekCycle: action.payload //<---------------------------action.payload
            }           
        case GETCYCLEDATE_FAILURE:
            return {
                ...state
            }
        //#######################################

        case GETWEEKNUMBER_START:
            return {
                ...state
            }           
        case GETWEEKNUMBER_SUCCESS:
            return {
                ...state,
                // endOfWeekCycle: action.payload //<---------------------------action.payload
            }           
        case GETWEEKNUMBER_FAILURE:
            return {
                ...state
            }

        //#############################################

        case WEEKNUMBERUPDATE_START:
            return {
                ...state
            }           
        case WEEKNUMBERUPDATE_SUCCESS:
            return {
                ...state,
                // endOfWeekCycle: action.payload //<---------------------------action.payload
            }           
        case WEEKNUMBERUPDATE_FAILURE:
            return {
                ...state
            }
    
    NEW_CYCLE_UPDATE_START, NEW_CYCLE_UPDATE_SUCCESS, NEW_CYCLE_UPDATE_FAILURE,
    CREATELOG_START, CREATELOG_SUCCESS, CREATELOG_FAILURE,
    CREATELOGENTRY_START, CREATELOGENTRY_SUCCESS, CREATELOGENTRY_FAILURE,
    GETCYCLEDATE_START, GETCYCLEDATE_SUCCESS, GETCYCLEDATE_FAILURE,
    GETWEEKNUMBER_START, GETWEEKNUMBER_SUCCESS, GETWEEKNUMBER_FAILURE,
    WEEKNUMBERUPDATE_START, WEEKNUMBERUPDATE_SUCCESS, WEEKNUMBERUPDATE_FAILURE,


      isDateLaterThanCDate(date, cDate) {
        //input date format: dd/mm/yyyy
        let dateSplit = date.split("/");
        //=====================
        let mm = dateSplit[0];
        let dd = dateSplit[1];
        let yyyy = dateSplit[2];
        //====================
        let cDateSplit = cDate.split("/");
        //=====================
        let cmm = cDateSplit[0];
        let cdd = cDateSplit[1];
        let cyyyy = cDateSplit[2];
        //======================
        if(yyyy > cyyyy){
          return true
        } else if (yyyy === cyyyy && mm > cmm){
          return true
        } else if (yyyy === cyyyy && mm === cmm && dd > cdd) {
          return true
        } else {
          return false
        }
    }